@page "/treeview"
@inject HttpClient Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Web
@using lr2CRUD.Components
@using static lr2CRUD.Components.ModalDialog
@using lr2CRUD.Models
@using lr2CRUD.Models
<h3 class="mb-3">Иерархическое дерево</h3>

<div class="row">
    <!-- Левая колонка: дерево -->
    <div class="col-4">
        @if (treeNodes == null)
        {
            <div>Загрузка...</div>
        }
        else
        {
            <ul class="list-group">
                @foreach (var node in treeNodes)
                {
                    <li class="list-group-item p-2">
                        <TreeNodeComponent Node="node"
                                           OnNodeDrop="@(data => HandleNodeDrop(data))"
                                           OnContextMenu="@(args => ShowContextMenu(args.Item1, args.Item2))"
                                           OnExpand="@(n => HandleExpand(n))" />
                    </li>
                }
            </ul>
        }
    </div>

    <!-- Правая колонка: Дополнительная информация / Подсказки -->
    <div class="col-8">
        <div class="alert alert-info">
            <strong>Подсказки:</strong>
            <ul class="mb-0">
                <li>Клик правой кнопкой по элементу дерева открывает контекстное меню.</li>
                <li>Вы можете перемещать аутфиты к другому пользователю (Drag & Drop) или комментарии к другому аутфиту.</li>
                <li>При редактировании/добавлении появится модальное окно.</li>
            </ul>
        </div>
    </div>
</div>

<!-- Контекстное меню -->
@if (showContextMenu)
{
    <div style="position:absolute; top:@contextMenuYpx; left:@contextMenuXpx; background-color:white; border:1px solid #ccc; z-index:1000;">
        <ul class="list-unstyled m-0 p-2">
            <li @onclick="() => EditNode(selectedNode)" style="cursor:pointer;">✎ Редактировать</li>
            <li @onclick="() => DeleteNode(selectedNode)" style="cursor:pointer;">🗑 Удалить</li>
            <li @onclick="() => AddChild(selectedNode)" style="cursor:pointer;">➕ Добавить дочерний</li>
        </ul>
    </div>
}

<!-- Модальное окно -->
<ModalDialog @ref="modalDialog" OnSave="OnModalSave" />

@code {
    private List<TreeNodeDto> treeNodes;
    private bool showContextMenu = false;
    private double contextMenuXpx;
    private double contextMenuYpx;
    private TreeNodeDto selectedNode;

    private ModalDialog modalDialog;

    protected override async Task OnInitializedAsync()
    {
        await LoadRootNodes();
    }

    private async Task LoadRootNodes()
    {
        treeNodes = await Http.GetFromJsonAsync<List<TreeNodeDto>>("api/tree/root");
    }

    private async Task HandleExpand(TreeNodeDto node)
    {
        if ((node.Children == null || node.Children.Count == 0) && node.HasChildren)
        {
            var children = await Http.GetFromJsonAsync<List<TreeNodeDto>>($"api/tree/{node.NodeType}/{node.Id}/children");
            node.Children = children;
            StateHasChanged();
        }
    }

    private async Task HandleNodeDrop((TreeNodeDto Dragged, TreeNodeDto Target) data)
    {
        var (draggedNode, targetNode) = data;
        var dto = new UpdateNodeDto();

        if (draggedNode.NodeType == "Outfit" && targetNode.NodeType == "User")
        {
            dto.NodeType = "Outfit";
            dto.NodeId = draggedNode.Id;
            dto.NewParentId = targetNode.Id;
        }
        else if (draggedNode.NodeType == "Comment" && targetNode.NodeType == "Outfit")
        {
            dto.NodeType = "Comment";
            dto.NodeId = draggedNode.Id;
            dto.NewParentId = targetNode.Id;
        }
        else
        {
            return; // недопустимое перемещение
        }

        var response = await Http.PutAsJsonAsync("api/tree/update", dto);
        if (response.IsSuccessStatusCode)
        {
            await RefreshNode(targetNode);
        }
    }

    private async Task RefreshNode(TreeNodeDto node)
    {
        if (node.HasChildren)
        {
            var children = await Http.GetFromJsonAsync<List<TreeNodeDto>>($"api/tree/{node.NodeType}/{node.Id}/children");
            node.Children = children;
            StateHasChanged();
        }
    }

    private void ShowContextMenu(TreeNodeDto node, MouseEventArgs e)
    {
        selectedNode = node;
        contextMenuXpx = e.ClientX;
        contextMenuYpx = e.ClientY;
        showContextMenu = true;
    }

    private void EditNode(TreeNodeDto node)
    {
        showContextMenu = false;
        modalDialog.ShowEdit(node);
    }

    private async Task DeleteNode(TreeNodeDto node)
    {
        showContextMenu = false;

        if (node.NodeType == "User")
        {
            var response = await Http.DeleteAsync($"api/users/{node.Id}");
            if (response.IsSuccessStatusCode)
            {
                RemoveNodeFromTree(node);
            }
        }
        else if (node.NodeType == "Outfit")
        {
            var response = await Http.DeleteAsync($"api/outfits/{node.Id}");
            if (response.IsSuccessStatusCode)
            {
                RemoveNodeFromTree(node);
            }
        }
        else if (node.NodeType == "Comment")
        {
            var response = await Http.DeleteAsync($"api/comments/{node.Id}");
            if (response.IsSuccessStatusCode)
            {
                RemoveNodeFromTree(node);
            }
        }
    }

    private void AddChild(TreeNodeDto node)
    {
        showContextMenu = false;
        if (node.NodeType == "User")
        {
            modalDialog.ShowCreate("Outfit", node.Id);
        }
        else if (node.NodeType == "Outfit")
        {
            modalDialog.ShowCreate("Comment", node.Id);
        }
    }

    private void RemoveNodeFromTree(TreeNodeDto node)
    {
        if (treeNodes.Contains(node))
        {
            treeNodes.Remove(node);
            return;
        }

        RemoveNodeRecursively(treeNodes, node);
        StateHasChanged();
    }

    private void RemoveNodeRecursively(List<TreeNodeDto> list, TreeNodeDto nodeToRemove)
    {
        foreach (var item in list)
        {
            if (item.Children.Contains(nodeToRemove))
            {
                item.Children.Remove(nodeToRemove);
                return;
            }
            if (item.Children.Any())
            {
                RemoveNodeRecursively(item.Children, nodeToRemove);
            }
        }
    }

    private async Task OnModalSave(ModalResult result)
    {
        if (result.CreatedNode != null)
        {
            var parentNode = FindNode(treeNodes, result.CreatedNode.ParentId, result.CreatedNode.ParentType);
            if (parentNode != null)
            {
                if (parentNode.Children == null)
                    parentNode.Children = new List<TreeNodeDto>();
                parentNode.Children.Add(result.CreatedNode);
                parentNode.HasChildren = true;
            }
        }
        else if (result.UpdatedNode != null)
        {
            var existingNode = FindNode(treeNodes, result.UpdatedNode.Id, result.UpdatedNode.NodeType);
            if (existingNode != null)
            {
                existingNode.Name = result.UpdatedNode.Name;
            }
        }

        StateHasChanged();
    }

    private TreeNodeDto FindNode(List<TreeNodeDto> list, int id, string nodeType)
    {
        foreach (var item in list)
        {
            if (item.Id == id && item.NodeType == nodeType)
                return item;

            if (item.Children != null && item.Children.Any())
            {
                var found = FindNode(item.Children, id, nodeType);
                if (found != null) return found;
            }
        }
        return null;
    }
}
