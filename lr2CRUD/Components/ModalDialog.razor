@inject IJSRuntime JS
@using Microsoft.AspNetCore.Components.Forms
@using lr2CRUD.Models
@using lr2CRUD.Models
@inject HttpClient Http
<div class="modal @(show ? "show d-block" : "fade")" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Title</h5>
                <button type="button" class="btn-close" @onclick="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="formModel" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    @if (formModel.NodeType == "User")
                    {
                        <div class="mb-3">
                            <label class="form-label">Username:</label>
                            <InputText @bind-Value="formModel.Username" class="form-control" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Email:</label>
                            <InputText @bind-Value="formModel.Email" class="form-control" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Password:</label>
                            <InputText @bind-Value="formModel.Password" type="password" class="form-control" />
                        </div>
                    }
                    else if (formModel.NodeType == "Outfit")
                    {
                        <div class="mb-3">
                            <label class="form-label">Title:</label>
                            <InputText @bind-Value="formModel.Title" class="form-control" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Description:</label>
                            <InputText @bind-Value="formModel.Description" class="form-control" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">ImageUrl:</label>
                            <InputText @bind-Value="formModel.ImageUrl" class="form-control" />
                        </div>
                    }
                    else if (formModel.NodeType == "Comment")
                    {
                        <div class="mb-3">
                            <label class="form-label">Text:</label>
                            <InputTextArea @bind-Value="formModel.Text" class="form-control" />
                        </div>
                    }

                    <div class="d-flex justify-content-end">
                        <button type="submit" class="btn btn-primary">@SubmitButtonText</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private bool show;
    public string Title { get; set; }
    public string SubmitButtonText { get; set; }

    [Parameter] public EventCallback<ModalResult> OnSave { get; set; }

    public ModalFormModel formModel = new ModalFormModel();

    public void ShowEdit(TreeNodeDto node)
    {
        show = true;
        Title = $"Редактировать {node.NodeType}";
        SubmitButtonText = "Сохранить";

        formModel.Id = node.Id;
        formModel.NodeType = node.NodeType;
        formModel.IsCreate = false;

        formModel.Name = node.Name;

        if (node.NodeType == "User")
        {
            formModel.Username = node.Name;
        }
        else if (node.NodeType == "Outfit")
        {
            formModel.Title = node.Name;
        }
        else if (node.NodeType == "Comment")
        {
            formModel.Text = node.Name;
        }
    }

    public void ShowCreate(string newType, int parentId)
    {
        show = true;
        Title = $"Создать {newType}";
        SubmitButtonText = "Создать";

        formModel = new ModalFormModel
            {
                NodeType = newType,
                ParentId = parentId,
                ParentType = (newType == "Outfit") ? "User" : "Outfit",
                IsCreate = true
            };
    }

    private async Task HandleValidSubmit()
    {
        if (formModel.IsCreate)
        {
            await CreateObject();
        }
        else
        {
            await UpdateObject();
        }
    }

    private async Task CreateObject()
    {
        try
        {
            if (formModel.NodeType == "User")
            {
                var createUser = new
                {
                    Username = formModel.Username,
                    Email = formModel.Email,
                    Password = formModel.Password
                };
                var response = await Http.PostAsJsonAsync("api/users", createUser);
                if (response.IsSuccessStatusCode)
                {
                    var createdUser = await response.Content.ReadFromJsonAsync<UserDto>();
                    var node = new TreeNodeDto
                        {
                            Id = createdUser.UserId,
                            Name = createdUser.Username,
                            NodeType = "User",
                            HasChildren = false,
                            ParentId = 0,
                            ParentType = ""
                        };
                    var result = new ModalResult { CreatedNode = node };
                    show = false;
                    await OnSave.InvokeAsync(result);
                }
                else
                {
                    var errorMsg = await response.Content.ReadAsStringAsync();
                    Console.WriteLine("Ошибка при создании пользователя: " + errorMsg);
                }
            }
            else if (formModel.NodeType == "Outfit")
            {
                var createOutfit = new
                {
                    Title = formModel.Title,
                    Description = formModel.Description,
                    ImageUrl = formModel.ImageUrl,
                    UserId = formModel.ParentId  // Родитель – пользователь
                };
                var response = await Http.PostAsJsonAsync("api/outfits", createOutfit);
                if (response.IsSuccessStatusCode)
                {
                    var createdOutfit = await response.Content.ReadFromJsonAsync<OutfitDto>();
                    var node = new TreeNodeDto
                        {
                            Id = createdOutfit.OutfitId,
                            Name = createdOutfit.Title,
                            NodeType = "Outfit",
                            HasChildren = false,
                            ParentId = formModel.ParentId,
                            ParentType = "User"
                        };
                    var result = new ModalResult { CreatedNode = node };
                    show = false;
                    await OnSave.InvokeAsync(result);
                }
                else
                {
                    var errorMsg = await response.Content.ReadAsStringAsync();
                    Console.WriteLine("Ошибка при создании аутфита: " + errorMsg);
                }
            }
            else if (formModel.NodeType == "Comment")
            {
                var createComment = new
                {
                    Text = formModel.Text,
                    OutfitId = formModel.ParentId  // Родитель – аутфит
                };
                var response = await Http.PostAsJsonAsync("api/comments", createComment);
                if (response.IsSuccessStatusCode)
                {
                    var createdComment = await response.Content.ReadFromJsonAsync<CommentDto>();
                    var node = new TreeNodeDto
                        {
                            Id = createdComment.CommentId,
                            Name = createdComment.Text,
                            NodeType = "Comment",
                            HasChildren = false,
                            ParentId = formModel.ParentId,
                            ParentType = "Outfit"
                        };
                    var result = new ModalResult { CreatedNode = node };
                    show = false;
                    await OnSave.InvokeAsync(result);
                }
                else
                {
                    var errorMsg = await response.Content.ReadAsStringAsync();
                    Console.WriteLine("Ошибка при создании комментария: " + errorMsg);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Исключение при создании объекта: " + ex.Message);
        }
    }

    private async Task UpdateObject()
    {
        try
        {
            if (formModel.NodeType == "User")
            {
                var updateUser = new
                {
                    Username = formModel.Username,
                    Email = formModel.Email,
                    Password = formModel.Password
                };
                var response = await Http.PutAsJsonAsync($"api/users/{formModel.Id}", updateUser);
                if (response.IsSuccessStatusCode)
                {
                    var updatedUser = await response.Content.ReadFromJsonAsync<UserDto>();
                    var node = new TreeNodeDto
                        {
                            Id = updatedUser.UserId,
                            Name = updatedUser.Username,
                            NodeType = "User"
                        };
                    var result = new ModalResult { UpdatedNode = node };
                    show = false;
                    await OnSave.InvokeAsync(result);
                }
                else
                {
                    var errorMsg = await response.Content.ReadAsStringAsync();
                    Console.WriteLine("Ошибка при обновлении пользователя: " + errorMsg);
                }
            }
            else if (formModel.NodeType == "Outfit")
            {
                var updateOutfit = new
                {
                    Title = formModel.Title,
                    Description = formModel.Description,
                    ImageUrl = formModel.ImageUrl
                };
                var response = await Http.PutAsJsonAsync($"api/outfits/{formModel.Id}", updateOutfit);
                if (response.IsSuccessStatusCode)
                {
                    var updatedOutfit = await response.Content.ReadFromJsonAsync<OutfitDto>();
                    var node = new TreeNodeDto
                        {
                            Id = updatedOutfit.OutfitId,
                            Name = updatedOutfit.Title,
                            NodeType = "Outfit"
                        };
                    var result = new ModalResult { UpdatedNode = node };
                    show = false;
                    await OnSave.InvokeAsync(result);
                }
                else
                {
                    var errorMsg = await response.Content.ReadAsStringAsync();
                    Console.WriteLine("Ошибка при обновлении аутфита: " + errorMsg);
                }
            }
            else if (formModel.NodeType == "Comment")
            {
                var updateComment = new
                {
                    Text = formModel.Text
                };
                var response = await Http.PutAsJsonAsync($"api/comments/{formModel.Id}", updateComment);
                if (response.IsSuccessStatusCode)
                {
                    var updatedComment = await response.Content.ReadFromJsonAsync<CommentDto>();
                    var node = new TreeNodeDto
                        {
                            Id = updatedComment.CommentId,
                            Name = updatedComment.Text,
                            NodeType = "Comment"
                        };
                    var result = new ModalResult { UpdatedNode = node };
                    show = false;
                    await OnSave.InvokeAsync(result);
                }
                else
                {
                    var errorMsg = await response.Content.ReadAsStringAsync();
                    Console.WriteLine("Ошибка при обновлении комментария: " + errorMsg);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Исключение при обновлении объекта: " + ex.Message);
        }
    }


    public void Close()
    {
        show = false;
    }

    // DTO для модального окна
    public class ModalFormModel
    {
        public int Id { get; set; }
        public string NodeType { get; set; }
        public bool IsCreate { get; set; }

        public string Username { get; set; }
        public string Email { get; set; }
        public string Password { get; set; }

        public string Title { get; set; }
        public string Description { get; set; }
        public string ImageUrl { get; set; }

        public string Text { get; set; }

        public int ParentId { get; set; }
        public string ParentType { get; set; }

        public string Name { get; set; }
    }

    public class ModalResult
    {
        public TreeNodeDto CreatedNode { get; set; }
        public TreeNodeDto UpdatedNode { get; set; }
    }
}
