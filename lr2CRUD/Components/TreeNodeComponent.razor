@using Microsoft.AspNetCore.Components.Web
@using lr2CRUD.Models

<li style="padding-left: 20px;">
    <div style="display: inline-flex; align-items: center;"
         draggable="true"
         @ondragstart="(e) => OnDragStart(e, Node)"
    @ondragover:preventDefault
         @ondrop="(e) => OnDrop(e, Node)"
    @oncontextmenu:preventDefault
         @oncontextmenu="(e) => OnRightClick(e, Node)">

        <!-- Кнопка раскрытия/сворачивания -->
        @if (Node.HasChildren)
        {
            <button class="btn btn-sm btn-link p-0 me-2"
                    style="font-size:0.9rem;"
                    @onclick="ToggleExpand">
                @(isExpanded ? "▼" : "▶")
            </button>
        }

        <span>@Node.Name (@Node.NodeType)</span>
    </div>

    @if (isExpanded && Node.Children != null && Node.Children.Any())
    {
        <ul class="list-unstyled">
            @foreach (var child in Node.Children)
            {
                <TreeNodeComponent Node="child"
                                   OnNodeDrop="OnNodeDrop"
                                   OnContextMenu="OnContextMenu"
                                   OnExpand="OnExpand" />
            }
        </ul>
    }
</li>

@code {
    [Parameter] public TreeNodeDto Node { get; set; }
    [Parameter] public EventCallback<(TreeNodeDto, TreeNodeDto)> OnNodeDrop { get; set; }
    [Parameter] public EventCallback<(TreeNodeDto, MouseEventArgs)> OnContextMenu { get; set; }
    [Parameter] public EventCallback<TreeNodeDto> OnExpand { get; set; }

    private TreeNodeDto draggedNode;

    // Локальное состояние раскрытия/сворачивания узла
    private bool isExpanded;

    // Drag & Drop: запоминаем перетаскиваемый узел
    private void OnDragStart(DragEventArgs e, TreeNodeDto node)
    {
        draggedNode = node;
    }

    // Drag & Drop: вызываем родительский EventCallback
    private async Task OnDrop(DragEventArgs e, TreeNodeDto targetNode)
    {
        if (draggedNode != null)
        {
            await OnNodeDrop.InvokeAsync((draggedNode, targetNode));
        }
    }

    // Контекстное меню: вызываем родительский EventCallback
    private async Task OnRightClick(MouseEventArgs e, TreeNodeDto node)
    {
        await OnContextMenu.InvokeAsync((node, e));
    }

    // Тогл: при первом разворачивании можно попросить родителя подгрузить детей
    private async Task ToggleExpand()
    {
        if (!isExpanded)
        {
            // Разворачиваем узел
            if (OnExpand.HasDelegate && Node.HasChildren && (Node.Children == null || Node.Children.Count == 0))
            {
                // Родитель (например, TreeView) подгрузит дочерние узлы
                await OnExpand.InvokeAsync(Node);
            }
            isExpanded = true;
        }
        else
        {
            // Сворачиваем узел
            isExpanded = false;
        }
    }
}
